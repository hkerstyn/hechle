def Predicate<T> = T -> Bool
def Predicate = _ -> Bool

def Maybe<T> = Some<T> / Bool

trait T:Functor
	map:T<U>, (U->V) -> T<V>

impl<T:Functor, U:Functor> T<U<_>>:Functor
	map = map<U>.map<T>  

trait T:Bifunctor
	bimap:(U->V),(W->X) ->(T<U,W> -> T<V,X>)

impl [_,_]:Bifunctor
	bimap(f,g) = (x,y) => [f x, g y]

impl<T:Bifunctor, U:Functor> T<U<_>,V>:Functor
	map = bimap map, id

[Some 5].map(+1) -- [Some 6]
[Some 5].map else 0 -- [5]
map<T,U,V>:T<U>, (U->V) -> T<V>
T<U> == [Maybe<Num>] == [_]<Maybe<Num>>
U == Num
-- extracting a type constructor T from T<U> and U:
-- case 1: U is mono
	-- step 1: dfs T<U> for a monotype that matches U
	-- step 2: find all other occurences
	-- step 3: if this doesnt exhaust T<U>, fail
	-- example: [Maybe<Num>, Num, [Num, Num]] over Num
	-- example: [Maybe<Num>, Maybe<Maybe<Num>>] over Maybe<Num> (or Num)
	-- non-example: [Num, Str]
-- case 2: U is multi
	-- step 1: search for the first mono in U
	-- step 2: search for the second mono in U
	-- ...
	-- if this doesnt exhaust T<U>, fail
	-- example: [Num, Maybe<Str>] over (Num, Str)
	-- example: [Num, Maybe<Str>] over (Num, Maybe<Str>)
	-- example: [x=Num, y=Str] over [y=Str, x=Num] -- technically also case 1
	-- non-example: [x=Num, y=Str] over (y=Str, x=Num)
T == [Maybe _]


[1, [2,3], Some 4].map(+1)

vector at [1,2..]
def<T:Functor> at<T<Num>> = map<T> at<Num>

["Hello", 2].bimap reverse, square

-- kinds
*			-- Num
*, *		-- Num, Str
* -> *		-- Maybe
*, * -> *   -- [_, _]
...

* -> *, *  		-- T => T, T
*, * -> *, * 	-- ,


**				-- Numeric
*(* -> *) 		-- Functor
*(*, * -> *) 	-- Bifunctor


trait<T:{**}> T:Defaultable
	Default

impl Numeric:Defaultable
	Default = Num64

trait T:Functor
	map:T<U>, (U->V) -> T<V>

trait T:Bifunctor
	bimap:T<U,W>, (U->V),(W->X) ->T<V,X>)

def Polymap{}{b} = ()
def Polymap{*,a}{b}<T,U:{a},V:{b}> = (T->V), Polymap{a}{b}<U,V>

trait<T:{a->b}> T:Polyfunctor{a->b}
	polymap<U:{a},V:{a}>:T<U>, Polymap{a}{a}<U,V> -> T<V>

impl<T:Polyfunctor{a->b}, U:Polyfunctor{b->c}> U<T<_>>:Polyfunctor{a->c}
	polymap f:Polymap{a}{a} = polymap{b->c}<U> polymap{a->b}<T> f
-- so, X=>[X, Iter<X>, X] == [_, _, _]<(X=>X,Iter<X>, X)>
-- is a Functor iff [_, _, _] is a Trifunctor (which it is)
-- and X=>X, Iter<X>,X is a Polyfunctor{*->*,*,*}

-- observation: X=>T<U<X>> == T<X=>U<X>>
-- observation: T == X=>T<X>

impl<T:Functor, U:Polyfunctor{*->a}> (X=>T<X>,U<X>):Polyfunctor{*->a}
-- so, (X=>X,Iter<X>,X) is a Polyfunctor{*->*,*,*} iff
-- X=>X is a Functor (which it is) (how do we know that X=>X == Id?)
-- and X=>Iter<X>,X is a Polyfunctor{*->*,*}




-- how to check whether a type T fulfills a trait U
-- step 1: check in the trait statement that T has the correct kind
-- step 2: check in the trait statement whether T needs to fulfill other traits first.
-- step 3: for each impl statement of U, match the implementee against T (beware cycles)
