-- some expresssions are impure
-- a function is impure if it mutates a value 
-- outside its scope
def impure(&mut x) = fn:
	x <- 3
	-4

-- the second line there is also impure:
let mut x <- 2
x <- 3

-- but a function that calls impure functions
-- isnt necessarily impure itself:
def pure = fn:
	let mut x <- 2
	x <- 3
	x

-- impure arguments are contagious:
square (impure x)

-- impurity is not part of the type system:
impure :&Num -> ()

-- execution is lazy:
def five_with_side_effect = fn:
	print! "side effect"
	5

let x = five_with_side_effect
print! "hello"
print! x + 10
-- output: "hello", "side effect", "15"

-- to trigger side effects eagerly, use !
let x = five_with_side_effect!

-- ! is not needed for visibly mutating functions
-- ie assignments
x <- 4

-- this only works for initial functions,
-- ie the following is deferred:
square five_with_side_effect!

-- instead you need
square! five_with_side_effect
square! five_with_side_effect! 
-- both of these are the same since five_with_side_effect has only one side effect
-- the former is preferred in this case

-- examples:
if 2 > 1:
	print "hi" 		-- is never computed since returns ()
	4
print! "yo", _
-- "yo", "Some 4"

if 2 > 1:
	print! "hi"
	4
print! "yo", _
-- "yo", "hi", "Some 4"

if! 2 > 1:
	print "hi"
	4
print! "yo", _
-- "yo", "Some 4"

if! 2 > 1:
	print! "hi"
	4
;
print! "yo", _
-- "hi", "yo", "Some 4"

