fn a(ref :&Num) -> [inside :&Num] {
    [inside = ref]
}

fn main {
    do {
        4 ->i
        a(&i)
    }
    inside -> Num
    print # 4

    {
        4 ->i
        5 ->j 
        # rc(i)=rc(j)=1
        &i ->r
        # a reference to i gets stored in r, rc(i)=2
        &j ->r 
        # a reference to j gets stored in r, rc(j)=2
        # the old reference to i gets dropped, rc(i)=1
        r
    }
    # i goes out of scope, rc(i) gets decremented and is now 0
    # j goes out of scope, rc(j)=1
    # j remains triumphant
}
# r goes out of scope, ie the reference to j
# rc(j)=0, j gets dropped