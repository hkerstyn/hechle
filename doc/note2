&3 	-- &Num


let a = 3
a 	-- &?Num
^a	-- ^Num ie undefined
&a	-- &Num

let b = a
b 	-- &?Num

let c = &a
c	-- &?&Num

let &d = &a
d	-- &?Num 

let &d = a 	-- undefined


-- copy
let b = a

-- alias
let &b = &a

-- reference
let b = &a


let a = 3
let b = 4
swap! &a &b

let swap(&a, &b) = fn:
    let c = a
    b = a
    a = c

def @(Vector<T>, Index)

def List T = () / (T,  List T)

def Index = Num / [Index] / (List Num)
def @(vect, i) = fn:
	return get vect i

def @(vect, [i]) = fn:
	return [vect @i]

def @(vect, i...) = fn:
	return i map(@vect .)...
