1 "String" -> Vector<*>
get(0) # Enum<Num, String>



Enum<Value, Else>


def _check cond -> {
	-> head
	if head cond then head 
}

def result :Maybe<Else> _else { body }
-> {
	co::if-then-else (result is Else) (body) (result)
}

def<T,U>
	_for i:Ident _in iter:Iter<T> { body } 
-> {
	loop {
		iter next
		check :? None {
			break
		}

		{
    		-> i
    		body
		}
	}
}

def<T> ( T ) -> {
	T
	warn(unused-braces)
}
	
def _main -> fn {
	for i in 1 2 3..=100 {
		(
    		if 3 divides i then
    			"fizz"
    		if 5 divides i then
    			"buzz"
		)
		
		join("-")
		print
	}
}


def _match x _against p:Pattern
-> {
	def:Match p; 
	if x ->? Match then { x -> Match }
}

def _debug str:String -> {
	addr(print) ->! ConstFn 
	call(str)
}
